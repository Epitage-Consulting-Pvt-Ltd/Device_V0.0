# -*- coding: utf-8 -*-
"""CRUD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18rg-2G_iDO9BZg4DmnnWaf6eb0xyVDH5
"""

import sqlite3

conn = sqlite3.connect('localdb.db')
curs = conn.cursor()
print ("Opened database successfully");

"""CRUD for employee table"""

#add emp
def add_employee(emp_id, EmpName, Department):
    curs.execute("INSERT INTO employees (emp_id, EmpName, Department) VALUES (?, ?, ?)", (emp_id, EmpName, Department))
    conn.commit()

# all emps from the table
def all_employees():
    curs.execute("SELECT * FROM employees")
    return curs.fetchall()

# emps by emp_id
def employee_by_id(id):
    curs.execute("SELECT * FROM employees WHERE id=?", (id,))
    return curs.fetchone()

# update info
def update_employee(emp_id, EmpName,Department):
    curs.execute("UPDATE employees SET emp_id=?, EmpName=?, Department=? WHERE id=?", (empid, empname, department))
    conn.commit()

# delete a emp
def delete_employee(id):
    curs.execute("DELETE FROM employees WHERE id=?", (id,))
    conn.commit()

"""CRUD for admin table"""

#  add an admin to the table
def add_admin(admin_id, emp_id):
    curs.execute("INSERT INTO admin (admin_id, emp_id) VALUES (?, ?)", (admin_id, emp_id))
    conn.commit()

#retrieve all admins from the table
def get_admins():
    curs.execute("SELECT * FROM admin")
    return curs.fetchall()

#  retrieve a specific admin by admin_id from the table
def get_admin_by_id(admin_id):
    curs.execute("SELECT * FROM admin WHERE admin_id=?", (admin_id,))
    return curs.fetchone()

# to update an admin's info in the table
def update_admin(admin_id, emp_id):
    curs.execute("UPDATE admin SET emp_id=? WHERE admin_id=?", (emp_id, admin_id))
    conn.commit()

# Create a function to delete an admin from the table
def delete_admin(admin_id):
    curs.execute("DELETE FROM admin WHERE admin_id=?", (admin_id,))
    conn.commit()

"""CRUD for faceid



"""

#  add a face id for an employee to the table
def add_face_id(emp_id, face_id):
    curs.execute("INSERT INTO faceid (emp_id, face_id) VALUES (?, ?)", (emp_id, face_id))
    conn.commit()

# Create a function to retrieve all face ids from the table
def get_all_face_ids():
    curs.execute("SELECT * FROM faceid")
    return curs.fetchall()

# Create a function to retrieve a specific face id by emp_id from the table
def get_face_id_by_emp_id(emp_id):
    curs.execute("SELECT * FROM faceid WHERE emp_id=?", (emp_id,))
    return curs.fetchone()

# Create a function to update a face id for an employee in the table
def update_face_id(emp_id, face_id):
    curs.execute("UPDATE faceid SET face_id=? WHERE emp_id=?", (face_id, emp_id))
    conn.commit()

# Create a function to delete a face id for an employee from the table
def delete_face_id(emp_id):
    curs.execute("DELETE FROM faceid WHERE emp_id=?", (emp_id,))
    conn.commit()

"""CRUD for Fingerprint"""

#  add a face id for an employee to the table
def add_fingerprinttag(emp_id, face_id):
    curs.execute("INSERT INTO fingerprinttag (emp_id, fingerprint_tag) VALUES (?, ?)", (emp_id, fingerprint_tag))
    conn.commit()

# Create a function to retrieve all face ids from the table
def get_all_fingerprinttag():
    curs.execute("SELECT * FROM fingerprinttag")
    return curs.fetchall()

# Create a function to retrieve a specific face id by emp_id from the table
def get_fingerprinttag_by_emp_id(emp_id):
    curs.execute("SELECT * FROM faceid WHERE emp_id=?", (emp_id,))
    return curs.fetchone()

# Create a function to update a face id for an employee in the table
def update_fingerprinttag(emp_id, fingerprint_tag):
    curs.execute("UPDATE faceid SET fingerprint_tag=? WHERE emp_id=?", (fingerprint_tag, emp_id))
    conn.commit()

# Create a function to delete a face id for an employee from the table
def delete_face_id(emp_id):
    curs.execute("DELETE FROM faceid WHERE emp_id=?", (emp_id,))
    conn.commit()

"""CRUD for rfid"""

#  add a face id for an employee to the table
def add_rfid(emp_id, rf_id):
    curs.execute("INSERT INTO rfid (emp_id, rf_id) VALUES (?, ?)", (emp_id, rf_id))
    conn.commit()

# to retrieve all face ids from the table
def get_all_rfid():
    curs.execute("SELECT * FROM rfid")
    return curs.fetchall()

# n to retrieve a specific face id by emp_id from the table
def get_rfid_by_emp_id(emp_id):
    curs.execute("SELECT * FROM rfid WHERE emp_id=?", (emp_id,))
    return curs.fetchone()

#  to update a face id for an employee in the table
def update_rfid(emp_id, rf_id):
    curs.execute("UPDATE rfid SET rf_id=? WHERE emp_id=?", (rf_id, emp_id))
    conn.commit()

#  delete a face id for an employee from the table
def delete_face_id(emp_id):
    curs.execute("DELETE FROM rfid WHERE emp_id=?", (emp_id,))
    conn.commit()